<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>proto_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>proto_mask1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Sets all of Proto's main variables
//Most of these should be pretty self-explanatory

slide = 0;
canslide = 1;
shoot = 0;
climb = 0;
grounded = 1;
paused = 0;
hsp = 0;
vsp = 0;
holeshift = 0;
canmove = true;
inwater = 0;

charge = 0;
chargeloop = 0;
chargeimgloop = 0;

canwalk = 0;
steploop = -1;
blinkloop = 3;

hurt = 0;
flash = 0;
flashloop = 0;

alarmshoot = -1;
alarmcharge = -1;
alarmchargefx = -1;
alarmbubble = -1;
alarmwalkshoot = -1;

press_right = 0;
press_left = 0;
press_up = 0;
press_down = 0;
press_a = 0;
press_b = 0;
press_start = 0;

fallsp = 14;
climbsp = 2.5;
wsp1 = 2.5; //Land
walksp = wsp1;
slsp1 = 5; //Land
slidesp = slsp1;
jsp1 = -10.5; //Land
jsp2 = -10.8; //Water
jumpsp = jsp1;
grv1 = 1; //Land
grv2 = 0.38; //Water
grav = grv1;

canwalkshoot = true;
canclimb = true;
canslide = true;


//Define movement variables
KEYHOLD_UP = -1;
KEYHOLD_DOWN = -1;
KEYHOLD_LEFT = -1;
KEYHOLD_RIGHT = -1;
KEYHOLD_A = -1;
KEYHOLD_B = -1;
KEYHOLD_START = -1;

//Sprite variables
SPRITE_STAND = proto_stand;
SPRITE_JUMP = proto_jump;
SPRITE_WALK = proto_walk;
SPRITE_SLIDE = proto_slide;
SPRITE_CLIMB = proto_climb;
SPRITE_BEND = proto_bend;
SPRITE_STANDSHOOT = proto_standshoot;
SPRITE_JUMPSHOOT = proto_jumpshoot;
SPRITE_WALKSHOOT = proto_walkshoot;
SPRITE_CLIMBSHOOT = proto_climbshoot;
SPRITE_HURT = proto_hurt;
SPRITE_TELEPORT1 = proto_teleport1;
SPRITE_TELEPORT2 = proto_teleport2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Flashing
if (paused) {exit;}

if (flashloop &gt; 0)
{
alarm[1] = 1;
flashloop -= 1;
if (visible == 0) {visible = 1; exit;}
if (visible == 1) {visible = 0; exit;}
}
else 
{
flashloop = 0;
flash = 0;
visible = 1;
death.issolid = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//End slide
if (paused) {alarm[0] = 1; exit;}

if (canslide == 2) {canslide = 1; exit;}

if (collision_rectangle(x-7,y-16,x+7,y-28,block,true,true) &amp;&amp; grounded == 0 &amp;&amp; hurt == 0)
{
slide = 0;
if (climb == 0 &amp;&amp; sprite_index != SPRITE_WALK &amp;&amp; sprite_index != SPRITE_WALKSHOOT) sprite_index = SPRITE_STAND;
hsp = 0; x=floor(x);
}


if (hurt == 0 &amp;&amp; (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true) || collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)))
{
if (collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) 
    {if (collision_rectangle(x-7,y-16,x+7,y-28,block,true,true).issolid == 1) {alarm[0] = 1; exit;} }

slide = 0; 
if (climb == 0 &amp;&amp; sprite_index != SPRITE_WALK &amp;&amp; sprite_index != SPRITE_WALKSHOOT) sprite_index = SPRITE_STAND;
hsp = 0; x=floor(x);
mask_index = proto_mask1; 
canslide = 2; alarm[0] = 1;
}
else
{
alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused) {exit;}
if (global.health &lt;= 0) {exit;}

//Pause
if (KEYHOLD_START &amp;&amp; press_start == 0 &amp;&amp; hurt == 0 &amp;&amp; !paused &amp;&amp; !instance_exists(boss_energyfiller))
{
press_start = 1;
sound_stop(sfx_pause); sound_play(sfx_pause);
instance_create(view_xview,view_yview,fadeout_pause);
fadeout_pause.pausevalue = 1;
}
if (!KEYHOLD_START &amp;&amp; press_start == 1) {press_start = 0;}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm - Charge
if (alarmcharge &gt; -1) 
{
    alarmcharge -= 1;
    if (alarmcharge == -1) {if (chargeloop != 0 &amp;&amp; charge != 0) {sound_loop(sfx_charging2);} }
}

if (paused) {exit;}

//Alarm - Charge FX
if (alarmchargefx &gt; -1 &amp;&amp; canmove) 
{
    alarmchargefx -= 1;
    if (alarmchargefx == 0) 
    {
        if (chargeimgloop &gt; 0 &amp;&amp; chargeimgloop &lt; 9)
        {
            alarmchargefx = 1;
            if (global.frame == global.frame_0) colors_swap('charging1')
            else if (global.frame == global.frame_1) colors_swap('normal')
        }
        if (chargeimgloop &gt; 8 &amp;&amp; chargeimgloop &lt; 17)
        {
            alarmchargefx = 1;
            if (global.frame == global.frame_0) colors_swap('charging2')
            else if (global.frame == global.frame_2) colors_swap('normal')
        }
        if (chargeimgloop &gt; 16 &amp;&amp; chargeimgloop &lt; 25)
        {
            alarmchargefx = 1;
            if (global.frame == global.frame_0) colors_swap('charging3')
            else if (global.frame == global.frame_3) colors_swap('normal')
        }
        if (chargeimgloop &gt; 24)
        {
            alarmchargefx = 1;
            if (global.frame == global.frame_0) colors_swap('charged1')
            else if (global.frame == global.frame_c1) colors_swap('charged2')
            else if (global.frame == global.frame_c2) colors_swap('normal')
        }
    }
}

//Alarm - End shoot
if (alarmshoot &gt; -1) 
{
    alarmshoot -= 1;
    if (alarmshoot == -1) {shoot = 0; canwalkshoot = true; alarmwalkshoot = -1;}
}

//Alarm - Release step if cannot walk and shoot
if (alarmwalkshoot &gt; -1) 
{
    alarmwalkshoot -= 1;
    if (alarmwalkshoot == -1) 
    {
    if (press_left == 1) press_left = 0; 
    if (press_right == 1) press_right = 0; 
    canwalk = 0;
    }
}

//Alarm - Air bubble
if (alarmbubble &gt; -1) 
{
    alarmbubble -= 1;
    if (alarmbubble == -1) 
    {
        alarmbubble = 9; 
        if (instance_number(airbubble)==0) 
        {
            if (image_xscale == -1) {instance_create(x-4,y-18,airbubble);}
            if (image_xscale == 1) {instance_create(x-2,y-18,airbubble);}
            with (airbubble) depth = 1;
        }
    }
}


//Set the input variables
if (canmove)
{
if (global.input == 0)
{
KEYHOLD_UP = keyboard_check(global.key_up);
KEYHOLD_DOWN = keyboard_check(global.key_down);
KEYHOLD_LEFT = keyboard_check(global.key_left);
KEYHOLD_RIGHT = keyboard_check(global.key_right);
KEYHOLD_A = keyboard_check(global.key_a);
KEYHOLD_B = keyboard_check(global.key_b);
KEYHOLD_START = keyboard_check(global.key_start);
}
}

//Jump
if (KEYHOLD_A &amp;&amp; press_a == 0 &amp;&amp; climb != 0 &amp;&amp; !KEYHOLD_UP &amp;&amp; !KEYHOLD_DOWN) {climb = 0; press_a = 1;}
if (KEYHOLD_A &amp;&amp; press_a == 0 &amp;&amp; !KEYHOLD_DOWN &amp;&amp; grounded == 1 &amp;&amp; hurt == 0 &amp;&amp; climb == 0) 
{
    press_a = 1;
    if (slide != 0) {alarm[0]=0; event_perform(ev_alarm,0);}
    if (slide == 0) {vsp=jumpsp; grounded = 0;}
}
if (!KEYHOLD_A &amp;&amp; press_a == 1 &amp;&amp; grounded == 0 &amp;&amp; vsp &lt; -1 &amp;&amp; climb == 0) {vsp = -1; press_a = 0;}
if (!KEYHOLD_A &amp;&amp; press_a == 1) {press_a = 0;}

//Slide
if (KEYHOLD_A &amp;&amp; press_a == 0 &amp;&amp; slide == 0 &amp;&amp; hurt == 0)
{
    press_a = 1;
    if (KEYHOLD_DOWN &amp;&amp; grounded == 1 &amp;&amp; canslide == 1)
    {
        x=floor(x);
        slide = 1;
        canslide = 0;
        shoot = 0; alarmshoot = -1;
        canwalkshoot = true; alarmwalkshoot = -1;
        image_speed = 0.3;
        if (image_xscale == -1) {hsp=-slidesp; if (!collision_line(x-15,y-4,x+15,y-4,block,true,true)) {instance_create(x+0,y,slidedust);} }
        if (image_xscale == 1) {hsp=slidesp; if (!collision_line(x-15,y-4,x+15,y-4,block,true,true)) {instance_create(x-8,y,slidedust);} }
        if (!collision_line(x-14,y-4,x+14,y-4,block,true,true)) {mask_index = proto_mask2;}
        else if (collision_line(x-14,y-4,x+0,y-4,block,true,true) || collision_line(x-0,y-4,x+14,y-4,block,true,true)) {
            mask_index = proto_mask3; 
            if (image_xscale == -1 &amp;&amp; !collision_line(x-15,y-4,x+0,y-4,block,true,true)) {instance_create(x+0,y,slidedust); }
            if (image_xscale == 1 &amp;&amp; !collision_line(x-0,y-4,x+15,y-4,block,true,true)) {instance_create(x-8,y,slidedust); }
        }
        alarm[0] = 13;
    }
}
if (mask_index == proto_mask3 &amp;&amp; !collision_line(x-14,y-4,x+14,y-4,block,true,true)) {mask_index = proto_mask2;}

//Shoot
switch (global.currentweapon)
{
    case 'normal': ShootNormal(); break;
    case 'stone': ShootNormal(); break;
    case 'gravity': ShootNormal(); break;
    case 'crystal': ShootCrystal(); break;
    case 'charge': ShootNormal(); break;
    case 'napalm': ShootNapalm(); break;
    case 'wave': ShootNormal(); break;
    case 'star': ShootStar(); break;
    case 'gyro': ShootGyro(); break;
    case 'arrow': ShootNormal(); break;
}

//Charge
var bschrg;
if (instance_exists(boss_energyfiller)) bschrg = false;
else bschrg = true;

if (KEYHOLD_B &amp;&amp; hurt == 0 &amp;&amp; global.currentweapon=='normal' &amp;&amp; bschrg) 
{
    if (press_b == 0) {press_b = 1;}
    if (chargeloop &lt; 45) {chargeloop += 1;}
    if (chargeloop == 21) {sound_play(sfx_charging1); alarmchargefx = 1; alarmcharge = 36; charge = 1;}
    if (chargeloop == 44) {charge = 2;}
}
if (!KEYHOLD_B &amp;&amp; press_b != 0 &amp;&amp; slide == 0) 
{
press_b = 0;
chargeloop = 0; 
chargeimgloop = 0;
if (charge == 1) {sound_stop(sfx_charging1); sound_stop(sfx_charging2); charge = 0; Fire(proto_bullet2,20); }
if (charge == 2) {sound_stop(sfx_charging1); sound_stop(sfx_charging2); charge = 0; Fire(proto_bullet3,28); }
}
if (chargeloop &gt; 20 &amp;&amp; chargeimgloop &lt; 30 &amp;&amp; bschrg) {chargeimgloop += 1;}

//Climb
LADR1 = collision_line(x,y-20,x,y-26,ladder,true,true);
LADR2 = collision_point(x,y-14,ladder,true,true);
LADR3 = collision_point(x,y-0,ladder_top,true,true);

//Don't climb if ladder is off-screen
if (LADR1 &amp;&amp; climb == 0) {with (LADR1) {if (y&lt;view_yview &amp;&amp; !instance_place(x+8,y+24,ladder)) {other.LADR1 = -4;} } }

if (LADR1 &amp;&amp; canclimb) //Climb and initiate climb up
{
    if (hurt == 0 &amp;&amp; climb == 2) {climb = 1;}
    if (KEYHOLD_UP &amp;&amp; !KEYHOLD_DOWN &amp;&amp; hurt == 0)
    {
        press_up = 1;
        if (climb == 0) {alarm[0]=0; event_perform(ev_alarm,0);}
        climb = 1;
        hsp = 0;
        x=LADR1.x+8;
        vsp=-climbsp;
        steploop=-1;
        alarm[0]=0; event_perform(ev_alarm,0);
        image_speed = 0.2;
        if (sprite_index = SPRITE_CLIMBSHOOT) {vsp = 0;}
    }
    if (KEYHOLD_DOWN &amp;&amp; climb != 0 &amp;&amp; hurt == 0)
    {
        press_down = 1;
        climb = 1;
        vsp=climbsp;
        steploop=-1;
        image_speed = 0.2;
        if (sprite_index = SPRITE_CLIMBSHOOT) {vsp = 0;}
    }
}
if (!LADR1 &amp;&amp; LADR2) //Bend over
{
    if (hurt == 0 &amp;&amp; climb == 1) {climb = 2;}
    if (KEYHOLD_UP &amp;&amp; !KEYHOLD_DOWN &amp;&amp; climb != 0 &amp;&amp; hurt == 0)
    {
        press_up = 1;
        hsp = 0;
        x=LADR2.x+8;
        vsp=-climbsp;
        steploop=-1;
        if (sprite_index = SPRITE_CLIMBSHOOT) {vsp = 0;}
    }
    if (KEYHOLD_DOWN &amp;&amp; climb != 0 &amp;&amp; hurt == 0)
    {
        press_down = 1;
        vsp=climbsp;
        steploop=-1;
        if (sprite_index = SPRITE_CLIMBSHOOT) {vsp = 0;}
    }
}
if (!LADR1 &amp;&amp; !LADR2 &amp;&amp; climb == 2) //Pull yourself up
{
    y=instance_nearest(x,y,ladder).y-15;
    climb = 0; vsp = 0; grounded = 1;
}

if (!LADR1 &amp;&amp; !LADR2 &amp;&amp; !LADR3 &amp;&amp; climb != 0) {climb = 0;} //Fall off ladder

if (!LADR1 &amp;&amp; !LADR2 &amp;&amp; LADR3 &amp;&amp; climb == 0 &amp;&amp; grounded == 1 &amp;&amp; canclimb) //Initiate climb down
{
    if (LADR3.issolid == 1 &amp;&amp; KEYHOLD_DOWN &amp;&amp; hurt == 0)
    {
        press_down = 1;
        with (LADR3) {issolid = 0;}
        y=LADR3.y+15;
        climb = 2;
        hsp = 0;
        x=LADR3.x+8;
        vsp=climbsp;
        steploop=-1; 
        alarm[0]=0; event_perform(ev_alarm,0);
        image_speed = 0.2;
        if (sprite_index = SPRITE_CLIMBSHOOT) {vsp = 0;}
    }
}


//Movement
//Pixel-Step
if (KEYHOLD_LEFT &amp;&amp; press_left == 0 &amp;&amp; canwalk == 0 &amp;&amp; hurt == 0) 
{
    press_left = 1;
    if (slide == 1) 
    {
        if (hsp == 0 || hsp &gt; 0) 
        {
            if (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) {alarm[0]=0; event_perform(ev_alarm,0); image_xscale = -1;}
            else {alarm[0]=1; hsp=-slidesp; image_xscale = -1;}
        } 
    }
    if (grounded == 1)
    {
        image_xscale = -1; 
        image_index = 2; 
        if (!instance_place(x-1,y,block) &amp;&amp; slide == 0) {x-=1;}
        else if (instance_place(x-1,y,block) &amp;&amp; slide == 0) {if ((instance_place(x-1,y,block)).issolid == 0) {x-=1;} }
        steploop=2;
    }
    else {canwalk = 1;}
}
if (KEYHOLD_RIGHT &amp;&amp; press_right == 0 &amp;&amp; canwalk == 0 &amp;&amp; hurt == 0) 
{
    press_right = 1;
    if (slide == 1) 
    {
        if (hsp == 0 || hsp &lt; 0) 
        {
            if (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) {alarm[0]=0; event_perform(ev_alarm,0); image_xscale = 1;}
            else {alarm[0]=1; hsp=slidesp; image_xscale = 1;}
        } 
    }
    if (grounded == 1)
    {
        image_xscale = 1; 
        image_index = 2; 
        if (!instance_place(x+1,y,block) &amp;&amp; slide == 0) {x+=1;}
        else if (instance_place(x+1,y,block) &amp;&amp; slide == 0) {if ((instance_place(x+1,y,block)).issolid == 0) {x+=1;} }
        steploop=2;
    }
    else {canwalk = 1;}
}
//Walk
if (climb == 0)
{
if (KEYHOLD_LEFT &amp;&amp; hurt == 0) 
{
    if (canwalkshoot == false &amp;&amp; grounded) {if (alarmwalkshoot == -1) alarmwalkshoot = 2;}
    else
    {
    press_left = 1;
    if (slide == 1 &amp;&amp; !KEYHOLD_RIGHT) 
    {
        if (hsp == 0 || hsp &gt; 0) 
        {
            if (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) {alarm[0]=0; event_perform(ev_alarm,0); image_xscale = -1;}
            else {alarm[0]=1; hsp=-slidesp; image_xscale = -1;}
        } 
    }
    if (canwalk == 1 &amp;&amp; slide == 0) {if (mask_index != proto_mask2) {hsp=-walksp;} image_xscale = -1;}
    else if (steploop &gt; 0) {steploop -= 1;}
    else if (steploop == 0 || steploop == -1) {canwalk = 1; steploop = -1;}
    }
} 

if (KEYHOLD_RIGHT &amp;&amp; hurt == 0) 
{
    if (canwalkshoot == false &amp;&amp; grounded) {if (alarmwalkshoot == -1) alarmwalkshoot = 2;}
    else 
    {
    press_right = 1;
    if (slide == 1) 
    {
        if (hsp == 0 || hsp &lt; 0) 
        {
            if (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) {alarm[0]=0; event_perform(ev_alarm,0); image_xscale = 1;}
            else {alarm[0]=1; hsp=slidesp; image_xscale = 1;}
        } 
    }
    if (canwalk == 1 &amp;&amp; slide == 0) {if (mask_index != proto_mask2) {hsp=walksp;} image_xscale = 1;}
    else if (steploop &gt; 0) {steploop -= 1;}
    else if (steploop == 0 || steploop == -1) {canwalk = 1; steploop = -1;}
    }
} 
}


//Key Release
if (!KEYHOLD_RIGHT &amp;&amp; press_right == 1 &amp;&amp; !KEYHOLD_LEFT &amp;&amp; hurt == 0 &amp;&amp; climb == 0) 
    {press_right = 0; canwalk = 0; steploop = -1; if (slide == 0) {hsp=0; x=floor(x); image_speed = 0; image_index = 0; sprite_index = SPRITE_STAND;} }
if (!KEYHOLD_LEFT &amp;&amp; press_left == 1 &amp;&amp; !KEYHOLD_RIGHT &amp;&amp; hurt == 0 &amp;&amp; climb == 0) 
    {press_left = 0; canwalk = 0; steploop = -1; if (slide == 0) {hsp=0; x=floor(x); image_speed = 0; image_index = 0; sprite_index = SPRITE_STAND;} }
if (!KEYHOLD_RIGHT || !KEYHOLD_LEFT) {if (climb != 0 &amp;&amp; !KEYHOLD_RIGHT &amp;&amp; !KEYHOLD_LEFT) 
    {canwalk = 0; press_right = 0; press_left = 0;} }

if (!KEYHOLD_UP &amp;&amp; press_up == 1 &amp;&amp; !KEYHOLD_DOWN &amp;&amp; climb != 0) {press_up = 0; vsp=0; y=floor(y); image_speed = 0; }
if (!KEYHOLD_DOWN &amp;&amp; press_down == 1 &amp;&amp; !KEYHOLD_UP &amp;&amp; climb != 0) {press_down = 0; vsp=0; y=floor(y); image_speed = 0; }


//Block collision - X
if (instance_place(x+hsp,y,block))
{
    blocklist = instance_place_list(x+hsp,y,block);

    blc=-1;
    repeat(ds_list_size(blocklist))
    {
    blc+=1;
    obj=ds_list_find_value(blocklist,blc);
    
    if (hsp != 0 &amp;&amp; obj.issolid == 1) 
    {
        while (!place_meeting(x+sign(hsp),y,obj)) {x+=sign(hsp);}
        hsp=0; x=floor(x); if (slide == 1) {alarm[0]=0; event_perform(ev_alarm,0);}
        break;
    }
    }
    ds_list_destroy(blocklist);
}
x+=hsp;


//Check if in air
checkissolid = CheckSolid(7,7);
if (slide == 0 &amp;&amp; checkissolid) {grounded=0; }
checkissolid = CheckSolid(13,13);
if (slide == 1 &amp;&amp; checkissolid) {grounded=0; alarm[0]=0; event_perform(ev_alarm,0);}

//Set gravity
if (grounded == 0 &amp;&amp; climb == 0) {vsp+=grav;}
if (vsp &gt;= fallsp) {vsp = fallsp;}


//Block collision - Y
if (instance_place(x,y+vsp,block) &amp;&amp; vsp&lt;0)
{
    if ((instance_place(x,y+vsp,block)).issolid == 1) 
    {
        while (!place_meeting(x,y+sign(vsp),block)) {y+=sign(vsp);}
        vsp=0;
    }
}

if (instance_place(x,y+vsp*2,block) &amp;&amp; !collision_point(x,y,block,true,true) &amp;&amp; vsp&gt;0) {if (instance_place(x,y+vsp*2,block).issolid == 1) vsp=round(vsp);}
if (instance_place(x,y+vsp,block) &amp;&amp; vsp&gt;0)
{
    blocklist = instance_place_list(x,y+vsp,block);

    blc=-1;
    repeat(ds_list_size(blocklist))
    {
    blc+=1;
    obj=ds_list_find_value(blocklist,blc);
    if (obj.issolid == 1) 
    {
        y=round(y);
        while (!place_meeting(x,y+sign(vsp),obj)) {y+=sign(vsp);}
        if (climb == 0) {sound_stop(sfx_land); sound_play(sfx_land);}
        grounded=1; vsp=0; climb=0;
        if (global.currentweapon == 'throwingweapon') //Prohibits movement ala Metal Blade; see "ShootNormal()" script for more info
        {
            if (canwalkshoot == false) {canwalk = 0; if (canmove == true) {hsp=0;} x=floor(x);}
        }
        break;
    }
    }
    ds_list_destroy(blocklist);
}
y+=vsp;

//Limit y value going above view
if (vsp &lt; 0 &amp;&amp; y &lt;= view_yview-8) {y = view_yview-8;}

//Collision - Enemy
if (collision_rectangle(x-7,y-2,x+7,bbox_top,enemyparent,true,true) &amp;&amp; flash == 0)
{
    enemylist = collision_rectangle_list(x-7,y-2,x+7,bbox_top,enemyparent,true,true);

    elc=-1;
    repeat(ds_list_size(enemylist))
    {
    elc+=1;
    ENEMY=ds_list_find_value(enemylist,elc);
    
    if (ENEMY.paused == 0 &amp;&amp; ENEMY.froze == 0 &amp;&amp; ENEMY.canhit == 0)
    {
    x=floor(x);
    flash = 1;
    hurt = 1;
    climb = 0;
    canwalkshoot = true; alarmwalkshoot = -1;
    image_index = 0;
    image_speed = 0.95;
    if !(slide == 0 &amp;&amp; alarm[0] &gt; 0) mask_index = proto_mask1;
    global.health -= ENEMY.mypower;
    if (global.health &gt; 0)
    {
        sprite_index = SPRITE_HURT;
        instance_create(x,y-23,proto_hitspark);
        sound_play(sfx_hit);
    }
    if (grounded == 0 &amp;&amp; vsp &lt; -1) {vsp = -1;}
    canwalk = 0;
    if (image_xscale == -1) {hsp=1;}
    if (image_xscale == 1) {hsp=-1;}
    
    death.issolid = 1;
    charge = 0;
    chargeloop = 0;
    chargeimgloop = 0;
    sound_stop(sfx_charging1); sound_stop(sfx_charging2);
    
    if (ENEMY.object_index == napalmman_bullet1 || ENEMY.object_index == napalmman_bullet2) {with (ENEMY) event_user(1); }
    break;
    }
    }
}

//Collision - Water
WTR_T = collision_rectangle(x-7,y-14,x+7,y-28,water,true,true);
WTR_F = collision_rectangle(x-7,y+14,x+7,y-12,water,true,true);

if (WTR_T &amp;&amp; inwater == 0) 
{
    inwater = 1; 
    jumpsp = jsp2;
    grav = grv2;
    alarmbubble = 9;
    with (splash) {instance_destroy();} 
    instance_create(x,WTR_T.y,splash);
}
if (!WTR_T &amp;&amp; WTR_F &amp;&amp; inwater == 1) 
{
    inwater = 0; 
    jumpsp = jsp1;
    grav = grv1;
    alarmbubble = -1;
    with (splash) {instance_destroy();} 
    instance_create(x,WTR_F.y,splash);
}

//Collision - Door
indoor = collision_rectangle(x-7,y-2,x+7,y-28,door1,true,true);

//Collision - Death
SPIKE = collision_rectangle(x-7,y-2,x+7,bbox_top,death,true,true);

if (SPIKE) {if (flash == 0) {global.health = 0;} }

if (global.health &lt;= 0) 
{
    global.health = 0;
    global.lives -= 1;
    sound_stop(sfx_death); sound_play(sfx_death);
    music_stop();
    charge = 0; chargeloop = 0; chargeimgloop = 0;
    sound_stop(sfx_charging1); sound_stop(sfx_charging2);
    if !(y-28 &gt; view_yview+view_hview)
    {
    dexpcount = 0;
    repeat(8) {
        dexpcount+=45;
        dexp = instance_create(x,y,proto_explosion); 
        with (dexp) {motion_set(proto.dexpcount,1.4); }
    }
    dexpcount = 0;
    repeat(8) {
        dexpcount+=45;
        dexp = instance_create(x,y,proto_explosion); 
        with (dexp) {motion_set(proto.dexpcount,2.8); }
    }
    }
    paused = 1; visible = 0;
    proto_energy.alarm[0] = room_speed*5;
}

//Holes
if (collision_rectangle(x-7,y-2,x+7,y-28,holedoor,true,true)) {holeshift = 1;}
else {holeshift = 0;}
if (y-28 &gt; view_yview+view_hview &amp;&amp; holeshift == 0) {global.health = 0;}


//Sprite Changes
if (hurt == 0)
{
if (grounded == 1)
{
    if (hsp == 0 &amp;&amp; slide == 0 &amp;&amp; canwalk == 0) 
    {
        if (shoot == 0) {sprite_index = SPRITE_STAND;}
        if (shoot == 1) {sprite_index = SPRITE_STANDSHOOT;}
        image_speed = 0; 
        if (steploop == -1 &amp;&amp; blinkloop == -1) {
            image_index=0; blinkloop = 3; //blinkloop = 46; would be Mega's blinking instead of Proto's cape
        } 
    }
    else if (hsp == 0 &amp;&amp; canwalk == 1 &amp;&amp; image_index != 0 &amp;&amp; (sprite_index == SPRITE_STAND || sprite_index == SPRITE_STANDSHOOT))
    {
        image_speed = 0; 
        if (steploop == -1 &amp;&amp; blinkloop == -1) 
        {
            image_index=0; blinkloop = 3; //blinkloop = 46; would be Mega's blinking instead of Proto's cape
        }
    }
    else 
    {
        image_speed = 0.3;
        if (slide == 1) {sprite_index = SPRITE_SLIDE;}
        else 
        {
            if (shoot == 0) {sprite_index = SPRITE_WALK;}
            if (shoot == 1) {sprite_index = SPRITE_WALKSHOOT;}
        }
    }
}
else
{
    if (climb != 0) 
    {
        if (shoot == 0) 
        {
        if (climb == 1) {sprite_index = SPRITE_CLIMB;}
        if (climb == 2) {sprite_index = SPRITE_BEND;}
        }
        if (shoot == 1) {sprite_index = SPRITE_CLIMBSHOOT;}
    }
    else
    {
        if (shoot == 0) {sprite_index = SPRITE_JUMP;}
        if (shoot == 1) {sprite_index = SPRITE_JUMPSHOOT;}
        image_speed = 0;
    }
}
}

//Blink
if (sprite_index == SPRITE_STAND &amp;&amp; image_index != 2)
{
    if (blinkloop &gt; 0) {blinkloop -= 1;}
    
    if (blinkloop == 0 &amp;&amp; image_index == 0) {blinkloop = 3; image_index = 1;}
    if (blinkloop == 0 &amp;&amp; image_index == 1) {blinkloop = 3; image_index = 0;}
    /* Mega's blinking
    if (blinkloop == 0 &amp;&amp; image_index == 0) {blinkloop = 4; image_index = 1;}
    if (blinkloop == 0 &amp;&amp; image_index == 1) {blinkloop = 46; image_index = 0;}
    */
}
else {blinkloop = -1;}

//End Charge FX
if (charge == 0 &amp;&amp; global.currentweapon == 'normal') colors_swap('normal');



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused) {exit;}

if (hurt == 1) //Ends the hurt animation
{
hurt = 0;
alarm[1] = 1;
flashloop = 29;
hsp=0;
if (slide == 1) 
{
    mask_index = proto_mask2;
    if (image_xscale == 1) {hsp=slidesp;}
    if (image_xscale == -1) {hsp=-slidesp;}
}

if (KEYHOLD_LEFT) 
{
    if (slide == 1) 
    {
        if (hsp == 0 || hsp &gt; 0) 
        {
            if (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) {event_perform(ev_alarm,0); image_xscale = -1;}
            else {alarm[0]=1; hsp=-slidesp; image_xscale = -1;}
        } 
    }
    if (grounded == 1)
    {
        image_xscale = -1; 
        image_index = 2; 
        if (!place_meeting(x-1,y,block) &amp;&amp; slide == 0) {x-=1;}
        steploop=2;
    }
    else {canwalk = 1;}
}
if (KEYHOLD_RIGHT) 
{
    if (slide == 1) 
    {
        if (hsp == 0 || hsp &lt; 0) 
        {
            if (!collision_rectangle(x-7,y-16,x+7,y-28,block,true,true)) {event_perform(ev_alarm,0); image_xscale = 1;}
            else {alarm[0]=1; hsp=slidesp; image_xscale = 1;}
        } 
    }
    if (grounded == 1)
    {
        image_xscale = 1; 
        image_index = 2; 
        if (!place_meeting(x+1,y,block) &amp;&amp; slide == 0) {x+=1;}
        steploop=2;
    }
    else {canwalk = 1;}
}

}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gets the current sprite_index and draws the proper colors around it

var xch,spr_frame,spr_head,spr_body; 
if (image_xscale == 1) xch = floor(x);
if (image_xscale == -1) xch = ceil(x);
spr_frame = sprite_get_name(sprite_index)+'_frame';
spr_head = sprite_get_name(sprite_index)+'_head';
spr_body = sprite_get_name(sprite_index)+'_body';
spr_frame = execute_string('spr_frame='+spr_frame);
spr_head = execute_string('spr_head='+spr_head);
spr_body = execute_string('spr_body='+spr_body);

draw_sprite_ext(sprite_index,image_index,xch,round(y),image_xscale,image_yscale,0,c_white,1);
draw_sprite_ext(spr_frame,image_index,xch,round(y),image_xscale,image_yscale,0,global.frame,1);
draw_sprite_ext(spr_head,image_index,xch,round(y),image_xscale,image_yscale,0,global.head,1);
draw_sprite_ext(spr_body,image_index,xch,round(y),image_xscale,image_yscale,0,global.body,1);

/*Supposedly the "execute_string" function is slow; if you have lag issues as the game gets bigger, you can 
resort to the following bulkier method for drawing the sprites:

var xch; 
if (image_xscale == 1) xch = floor(x);
if (image_xscale == -1) xch = ceil(x);

draw_sprite_ext(sprite_index,image_index,xch,round(y),image_xscale,image_yscale,0,c_white,1);

switch (sprite_index)
{
    case SPRITE_STAND:
            draw_sprite_ext(proto_stand_frame,image_index,xch,round(y),image_xscale,image_yscale,0,global.frame,1);
            draw_sprite_ext(proto_stand_head,image_index,xch,round(y),image_xscale,image_yscale,0,global.head,1);
            draw_sprite_ext(proto_stand_body,image_index,xch,round(y),image_xscale,image_yscale,0,global.body,1);
            break;
}
*/</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
