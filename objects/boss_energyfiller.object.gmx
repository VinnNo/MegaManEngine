<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>msk_boss1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>msk_boss1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
canfreeze = false;
canfall = 0;

y-=32;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(proto)) {alarm[1] = 1; exit; }

if (proto.grounded == 1)
{
music_stop();
with (proto)
{
charge = 0; chargeloop = 0; chargeimgloop = 0;
sound_stop(sfx_charging1); sound_stop(sfx_charging2);
if (global.currentweapon=='normal') colors_swap('normal');
instance_create(x,y,exit_obj);
exit_obj.sprite_index = SPRITE_TELEPORT2;
paused = 1; visible = 0;
}
}
else alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (proto.grounded == 1)
{
    //if (sprite_index == stoneman_intro &amp;&amp; global.stone_defeated == 1) {alarm[1] = 1; exit;}
    //if (sprite_index == gravityman_intro &amp;&amp; global.gravity_defeated == 1) {alarm[1] = 1; exit;}
    //if (sprite_index == crystalman_intro &amp;&amp; global.crystal_defeated == 1) {alarm[1] = 1; exit;}
    //if (sprite_index == chargeman_intro &amp;&amp; global.charge_defeated == 1) {alarm[1] = 1; exit;}
    if (sprite_index == napalmman_intro &amp;&amp; global.napalm_defeated == 1) {alarm[1] = 1; exit;}
    //if (sprite_index == waveman_intro &amp;&amp; global.wave_defeated == 1) {alarm[1] = 1; exit;}
    //if (sprite_index == starman_intro &amp;&amp; global.star_defeated == 1) {alarm[1] = 1; exit;}
    //if (sprite_index == gyroman_intro &amp;&amp; global.gyro_defeated == 1) {alarm[1] = 1; exit;}
    
    canfreeze = true;
    with (proto) {alarm[0]=0; event_perform(ev_alarm,0);}
    
    sound_volume(sfx_charging2,0);
    visible = 1;
    vspeed = 3; 
    canfall = 1;
    
    event_user(2); //Start music
}
else 
{
    alarm[0] = 1;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canfreeze == true) 
{
with (proto)
{
canmove = false;
KEYHOLD_UP = 0;
KEYHOLD_DOWN = 0;
KEYHOLD_LEFT = 0;
KEYHOLD_RIGHT = 0;
KEYHOLD_A = 0;
}
}

if (canfall == 1)
{
vspeed += 1;
}

//If a boss intro sprite needs image_speed adjusting mid-animation, do it like so:
//if (sprite_index == crystalman_intro &amp;&amp; image_index &gt; 5 &amp;&amp; image_speed == 0.2) image_speed = 0.4;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="teleport_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visible)
{
if (vspeed != 0) {vspeed = 0; canfall = 0; y=other.y+1;}
if (hspeed != 0) {hspeed = 0; x=xprevious;}

switch (sprite_index)
{
    //case stoneman_intro: image_speed = 0.2; break;
    //case gravityman_intro: image_speed = 0.2; break;
    //case crystalman_intro: image_speed = 0.2; break;
    //case chargeman_intro: image_speed = 0.2; break;
    case napalmman_intro: image_speed = 0.2; break;
    //case waveman_intro: image_speed = 0.2; break;
    //case starman_intro: image_speed = 0.2; break;
    //case gyroman_intro: image_speed = 0.2; break;
}
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Start Music
//May seem useless to have an event just for this action, 
//but later on in the game when you have Wily boss music 
//and such you'll want special conditions in here.
music_play(global.music_boss1,'mp3','loop');</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>music_stop();
with (proto)
{
charge = 0; chargeloop = 0; chargeimgloop = 0;
sound_stop(sfx_charging1); sound_stop(sfx_charging2);
instance_create(x,y,exit_obj);
exit_obj.sprite_index = SPRITE_TELEPORT2;
paused = 1; visible = 0;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((y &gt; view_yview+224-12 || x &lt; view_xview+16)) exit;

instance_destroy();
proto.canmove = true;
sound_volume(sfx_charging2,1);

switch (sprite_index)
{
    //case stoneman_intro: tbs = instance_create(x,y,stoneman); break;
    //case gravityman_intro: tbs = instance_create(x,y,gravityman); break;
    //case crystalman_intro: tbs = instance_create(x,y,crystalman); break;
    //case chargeman_intro: tbs = instance_create(x,y,chargeman); break;
    case napalmman_intro: tbs = instance_create(x,y,napalmman); break;
    //case waveman_intro: tbs = instance_create(x,y,waveman); break;
    //case starman_intro: tbs = instance_create(x,y,starman); break;
    //case gyroman_intro: tbs = instance_create(x,y,gyroman); break;
}

tbs.rx = xstart; 
tbs.ry = ystart; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//When creating a boss energy bar, assign the two colors it will use

image_speed = 0;
eb = instance_create(view_xview+24,view_yview+17,boss_energybar);

switch (sprite_index)
{
    //case stoneman_intro: image_index = 0; break;
    //case gravityman_intro: image_index = 0; break;
    //case crystalman_intro: image_index = 0; break;
    //case chargeman_intro: image_index = 0; break;
    case napalmman_intro: 
        image_index = 9; 
        eb.col_head = make_color_rgb(231,0,91); 
        eb.col_body = make_color_rgb(255,255,255); 
        break;
    //case waveman_intro: image_index = 0; break;
    //case starman_intro: image_index = 0; break;
    //case gyroman_intro: image_index = 0; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
