<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_lyric1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>enemyparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Lyric is pretty bare bones, so pretty much everything in here is 
//essential for every enemy.

myhealth = 1; 
mypower = 3; //How much damage is dealt to the player

image_speed = 0.4;
paused = 0;
onscreen = 1;
flashing = 0;
canhit = 0;
froze = 0;
xv = 8; //Relates to its cutoff position, or rather, when it becomes visible in the view and such

if (x-xv &gt; view_xview+view_wview || x+xv &lt; view_xview || y &gt; view_yview+view_hview || y &lt; view_yview) 
{visible = 0; onscreen = 0;}


//Sprite Variations
//As the 'powermuscler' enemy demonstrates, this is how you would recolor enemies based on what level they're in.
if (global.currentlevel == level_napalm)
{
    SPRITE_NORMAL = spr_lyric1;
}
else
{
    SPRITE_NORMAL = spr_lyric1;
}
sprite_index = SPRITE_NORMAL;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hit Flashing
if (flashing == 3) {visible = 1; alarm[7] = 1; flashing -= 1; exit;}
if (flashing == 2) {visible = 0; alarm[7] = 1; flashing -= 1; exit;}
if (flashing == 1 &amp;&amp; visible == 0) {visible = 1; alarm[7] = 1; exit;}
if (flashing == 1) {flashing -= 1; exit;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//The bare bones step event for an enemy. This deals with its on screen functionality, its pausing,
//and what to do when it runs out of health. You'll usually find this code separated as below for all enemies.

if (x-xv &gt; view_xview+view_wview || x+xv &lt; view_xview || y &gt; view_yview+view_hview || y &lt; view_yview) 
{event_user(15); }
else if (onscreen == 0) {onscreen = 1; visible = 1; froze = 0; }

if (paused) exit;

if (myhealth &lt;= 0)
{
event_user(15);
instance_create(x-1,y+16,itemexplosion);
exit;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Usually I put this second block of code to separate the enemy's standard functionality from
//its behavior; the below is this enemy's behavior, which just follows the character around.

if (instance_exists(proto) &amp;&amp; paused == 0 &amp;&amp; froze == 0)
{
mp_linear_step(proto.x,proto.y-16,1.0,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bulletparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (froze == 0 &amp;&amp; onscreen == 1 &amp;&amp; canhit == 0 &amp;&amp; other.ricochet == 0)
{
//The following line causes a bullet to ricochet; see the 'taban' enemy for more on that.
//with (other) {event_user(0); exit; }

sound_stop(sfx_enemyhit); sound_play(sfx_enemyhit); 
sound_stop(sfx_shoot1); sound_stop(sfx_shoot2); sound_stop(sfx_shoot3);
sound_stop(sfx_gyroattack);

if (flashing == 0)
{
flashing = 3;
visible = 0;
alarm[7] = 2;
switch (other.object_index)
{
    case proto_bullet1:
    case proto_bullet2:     myhealth -= 1; break;
    case proto_bullet3:     myhealth -= global.csp; break;
    case crystal_bullet1:   
    case crystal_bullet2:   myhealth -= 1; break;
    case napalm_bullet1:    
    case napalm_bullet2:    myhealth -= 1; break;
    case star_bullet1:      myhealth -= 1; break;
    case gyro_bullet1:      myhealth -= 1; break;
}
}

//Destroy Bullet
switch (other.object_index)
{
    case proto_bullet1:
    case proto_bullet2: 
    case crystal_bullet1: 
    case crystal_bullet2:
    case gyro_bullet1:
        with (other) instance_destroy(); break;
    case proto_bullet3:
        if (myhealth &gt; 0) {with (other) instance_destroy();} break;
    case star_bullet1:
    case napalm_bullet1: 
        with (other) {instance_destroy(); event_user(1);} break;
    case napalm_bullet2: 
        if (myhealth &gt; 0) {other.ricochet = 1;} break;
}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This code should remain unaltered for every enemy except for special cases, and of course
//the instance_create function should have the name of the enemy being destroyed.
instance_destroy();
new = instance_create(xstart,ystart,lyric);

if (froze == 0 &amp;&amp; onscreen == 1 &amp;&amp; camera.movecount == 0 &amp;&amp; !instance_exists(fadeout_death)) 
{
    with (new) 
    {
        if (x-xv &lt; view_xview+view_wview || x+xv &gt; view_xview || y &gt; view_yview+view_hview || y &lt; view_yview) 
        {froze = 1; visible = 0; } 
    } 
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
