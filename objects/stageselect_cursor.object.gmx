<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>stgselect_cursor</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.2;
whereto_x = 'm';
whereto_y = 'm';
stc = "";
enc = "";

press_up = 1;
press_down = 1;
press_left = 1;
press_right = 1;
press_a = 1;
press_start = 1;

//Set input
if (global.input == 0)
{
KEYHOLD_UP = keyboard_check(global.key_up);
KEYHOLD_DOWN = keyboard_check(global.key_down);
KEYHOLD_LEFT = keyboard_check(global.key_left);
KEYHOLD_RIGHT = keyboard_check(global.key_right);
KEYHOLD_A = keyboard_check(global.key_a);
KEYHOLD_START = keyboard_check(global.key_start);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visible == 0 &amp;&amp; !instance_exists(fadeout_shift) &amp;&amp; global.stageselect_value == 0) visible = 1;

//Set Input
if (global.input == 0)
{
KEYHOLD_UP = keyboard_check(global.key_up);
KEYHOLD_DOWN = keyboard_check(global.key_down);
KEYHOLD_LEFT = keyboard_check(global.key_left);
KEYHOLD_RIGHT = keyboard_check(global.key_right);
KEYHOLD_A = keyboard_check(global.key_a);
KEYHOLD_START = keyboard_check(global.key_start);
}

//Press
if (visible)
{
if (KEYHOLD_START &amp;&amp; press_start == 0) {press_start = 1; event_user(0); exit;}
if (KEYHOLD_A &amp;&amp; press_a == 0) {press_a = 1; event_user(0); exit;}
if (KEYHOLD_LEFT &amp;&amp; press_left == 0) {press_left = 1; event_user(1);}
if (KEYHOLD_UP &amp;&amp; press_up == 0) {press_up = 1; event_user(2);}
if (KEYHOLD_RIGHT &amp;&amp; press_right == 0) {press_right = 1; event_user(3);}
if (KEYHOLD_DOWN &amp;&amp; press_down == 0) {press_down = 1; event_user(4);}
}

//Release
if (!KEYHOLD_START &amp;&amp; press_start == 1) {press_start = 0;}
if (!KEYHOLD_A &amp;&amp; press_a == 1) {press_a = 0;}
if (!KEYHOLD_LEFT &amp;&amp; press_left == 1) {press_left = 0;}
if (!KEYHOLD_UP &amp;&amp; press_up == 1) {press_up = 0;}
if (!KEYHOLD_RIGHT &amp;&amp; press_right == 1) {press_right = 0;}
if (!KEYHOLD_DOWN &amp;&amp; press_down == 1) {press_down = 0;}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_stop(sfx_selected); sound_play(sfx_selected);

stc1 = "instance_destroy();";
enc1 = "";
stc2 = "with (itemparent) visible = 0;";
enc2 = "with (proto_energy) event_user(0);";

switch (global.currentlevel)
{
    /*case level_stone: 
        if (global.stone_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;
    case level_gravity: 
        if (global.gravity_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;
    case level_crystal: 
        if (global.crystal_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;
    case level_charge: 
        if (global.charge_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;*/
    case level_napalm: 
        if (global.napalm_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;
    /*case level_wave: 
        if (global.wave_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;
    case level_star: 
        if (global.star_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;
    case level_gyro: 
        if (global.gyro_defeated == 0) fade_to_room(bossintroroom,stc1,enc1); 
        else fade_to_room(global.currentlevel,stc2,enc2);
        break;*/
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Down

sound_stop(sfx_select); sound_play(sfx_select);

switch (whereto_y)
{
    case 'm': whereto_y = 'b'; y+=64; break;
    case 'b': whereto_y = 't'; y-=128; break;
    case 't': whereto_y = 'm'; y+=64; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Right

sound_stop(sfx_select); sound_play(sfx_select);

switch (whereto_x)
{
    case 'm': whereto_x = 'r'; x+=80; break;
    case 'l': whereto_x = 'm'; x+=80; break;
    case 'r': whereto_x = 'l'; x-=160; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Up

sound_stop(sfx_select); sound_play(sfx_select);

switch (whereto_y)
{
    case 'm': whereto_y = 't'; y-=64; break;
    case 't': whereto_y = 'b'; y+=128; break;
    case 'b': whereto_y = 'm'; y-=64; break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Left

sound_stop(sfx_select); sound_play(sfx_select);

switch (whereto_x)
{
    case 'm': whereto_x = 'l'; x-=80; break;
    case 'l': whereto_x = 'r'; x+=160; break;
    case 'r': whereto_x = 'm'; x-=80; break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Start &amp; A

if (whereto_x == 'm' &amp;&amp; whereto_y == 't') {/*visible = 0; global.currentlevel = level_gravity; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }
if (whereto_x == 'l' &amp;&amp; whereto_y == 't') {/*visible = 0; global.currentlevel = level_stone; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }
if (whereto_x == 'r' &amp;&amp; whereto_y == 't') {/*visible = 0; global.currentlevel = level_crystal; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }

if (whereto_x == 'l' &amp;&amp; whereto_y == 'm') {/*visible = 0; global.currentlevel = level_charge; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }
if (whereto_x == 'r' &amp;&amp; whereto_y == 'm') {visible = 0; global.currentlevel = level_napalm; event_user(15); exit; }

if (whereto_x == 'm' &amp;&amp; whereto_y == 'b') {/*visible = 0; global.currentlevel = level_star; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }
if (whereto_x == 'l' &amp;&amp; whereto_y == 'b') {/*visible = 0; global.currentlevel = level_wave; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }
if (whereto_x == 'r' &amp;&amp; whereto_y == 'b') {/*visible = 0; global.currentlevel = level_gyro; event_user(15);*/ sound_stop(sfx_error); sound_play(sfx_error); exit; }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
